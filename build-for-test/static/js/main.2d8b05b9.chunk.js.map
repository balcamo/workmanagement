{"version":3,"sources":["components/nav.js","components/WorkOrders.js","components/Main.js","App.js","serviceWorker.js","AuthConfig.js","index.js"],"names":["NavNav","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","bind","assertThisInitialized","state","dropdownOpen","setState","react_default","a","createElement","reactstrap_es","pills","href","className","Component","WorkOrders","baseURL","selectedState","workOrderNums","orderFrom","orderTo","setDropdownOpen","isHidden","returnedWorkOrders","reportURL","workOrderPDF","modal","report","reportScript","toggleDropDown","GetWorkOrders","PrintWorkOrders","toggleModal","_this2","setTimeout","fetch","method","then","response","ok","error","Error","statusText","res","json","data","console","log","tempArr","value","map","val","push","toString","catch","e","_this3","preventDefault","temp","JSON","stringify","body","headers","Content-Type","length","alert","jsreport","serverUrl","reportRequest","template","name","workOrders","express","inputRequestLimit","renderAsync","html","toDataURI","window","open","document","write","close","_this4","workForms","item","key","woNumber","creator","priority","description","type","onChange","target","header","for","id","onClick","bordered","dark","hover","Main","light","nav","react_router_dom","react_router","path","component","withRouter","App","components_Main","Boolean","location","hostname","match","adalConfig","tenant","clientId","endpoints","api","apiUrl","cacheLocation","authContext","AuthenticationContext","withAdalLogin","runWithAdal","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2d8b05b9.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport { NavItem, Nav, NavLink } from 'reactstrap';\r\n\r\nclass NavNav extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n        this.state = {\r\n          dropdownOpen: false\r\n        };\r\n      }\r\n    \r\n    toggle() {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen\r\n        });\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <div>\r\n                <Nav pills>\r\n                    <NavItem>\r\n                        <NavLink href=\"https://apiarytest-react-homepage.azurewebsites.net/\"><span className=\"fa fa-home fa-lg\"></span> Home </NavLink>\r\n                    </NavItem>                    \r\n                    \r\n                </Nav>\r\n\r\n            </div>\r\n        );\r\n    }\r\n    \r\n}\r\nexport default  NavNav;","import React, { Component,Fragment } from 'react';\r\nimport fetch from 'isomorphic-fetch';\r\nimport jsreport from 'jsreport-browser-client-dist';\r\nimport { Button, Form, FormGroup, Input, Label, Table,\r\n     Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\r\n\r\nclass WorkOrders extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          baseURL:'https://apiarytest-windows-ispringbrook.azurewebsites.net/api/workorder',\r\n          selectedState: 'In Progress',\r\n          setState:false,\r\n          workOrderNums:[],\r\n          orderFrom:\"\",\r\n          orderTo:\"\",\r\n          dropdownOpen:false,\r\n          setDropdownOpen:false,\r\n          isHidden:true,\r\n          returnedWorkOrders:[],\r\n          reportURL:'https://apiarytest-linux-ireportwriter.azurewebsites.net/workOrders',\r\n          workOrderPDF:null,\r\n          modal:false,\r\n          report: '',\r\n          reportScript: ''\r\n        };\r\n        this.toggleDropDown = this.toggleDropDown.bind(this);\r\n        this.GetWorkOrders = this.GetWorkOrders.bind(this);\r\n        this.PrintWorkOrders = this.PrintWorkOrders.bind(this);\r\n        this.toggleModal = this.toggleModal.bind(this);\r\n\r\n      }\r\n    toggleModal(){\r\n        this.setState({modal:!this.state.modal})\r\n    }\r\n    toggleDropDown(){\r\n        this.setState({dropdownOpen: !this.state.dropdownOpen});\r\n    }\r\n    getData(){\r\n        setTimeout(() => {\r\n          fetch(this.state.baseURL, {\r\n              method:\"GET\"\r\n          }).then(function(response) {\r\n              if (response.ok) {\r\n                return response\r\n              } else {\r\n                var error = new Error(response.statusText);\r\n                error.response = response;\r\n                throw error;\r\n              }\r\n            })\r\n             .then(res => res.json())\r\n             .then((data) => {\r\n                console.log(data);\r\n                 var tempArr =  data[0].value;\r\n                 tempArr.map(val=>this.state.workOrderNums.push(val.toString()));\r\n                 this.setState({ workOrderNums: tempArr });\r\n                 console.log(\"state var \"+this.state.workOrderNums);\r\n              })\r\n              .catch(console.log);\r\n        }, 200)\r\n      }\r\n    //get the data on load\r\n    componentDidMount(){\r\n       // this.getData();\r\n    }\r\n    \r\n    GetWorkOrders(e) {\r\n        e.preventDefault();\r\n        var temp=JSON.stringify([this.state.orderFrom.toString(),this.state.orderTo.toString(),this.state.selectedState]);\r\n        console.log('in change function '+this.state.selectedState);\r\n        \r\n        fetch(this.state.baseURL, {\r\n            method:\"POST\",\r\n            body:temp,\r\n            headers:{\r\n                'Content-Type': 'application/json'\r\n            }\r\n        }).then(function(response) {\r\n            if (response.ok) {\r\n            return response\r\n            } else {\r\n            var error = new Error(response.statusText);\r\n            error.response = response;\r\n            throw error;\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then((data) => {\r\n            console.log(data);\r\n            if(data.length===0){\r\n                this.setState({returnedWorkOrders:[],orderFrom:'',\r\n                    orderTo:'',selectedState:'In Progress'})\r\n                alert(\"There are no work orders in that range for the given status.\\nPlease try again with different values.\")\r\n\r\n            }else{\r\n                this.setState({returnedWorkOrders:[]});\r\n                var tempdata=data;\r\n                \r\n                tempdata.map(val=>this.state.returnedWorkOrders.push(val.value));\r\n                this.setState({returnedWorkOrders:this.state.returnedWorkOrders,\r\n                    orderFrom:\"\",orderTo:\"\",selectedState:'In Progress'})\r\n\r\n                console.log(this.state.returnedWorkOrders);\r\n            }\r\n            })\r\n            .catch(console.log);\r\n        return false\r\n    }\r\n    \r\n    PrintWorkOrders(e) {\r\n        e.preventDefault();\r\n       \r\n        jsreport.serverUrl = 'https://vwp.jsreportonline.net';\r\n        let reportRequest = { template: { name: \"/WorkOrders/workOrders\" },\r\n                              data: {workOrders:this.state.returnedWorkOrders},\r\n                              express:{inputRequestLimit: \"500mb\"}\r\n                            };\r\n        jsreport.headers['Authorization'] = 'Basic ' + 'dmVyYTp2ZXJhd2F0ZXJhbmRwb3dlcg==';\r\n        jsreport.renderAsync(reportRequest).then(function(res){\r\n            console.log(res);\r\n            var html = '<html>' +\r\n            '<style>html,body {padding:0;margin:0;} iframe {width:100%;height:100%;border:0}</style>' +\r\n            '<body>' +                                \r\n            '<iframe type=\"application/pdf\" src=\"' +  res.toDataURI() + '\"></iframe>' +\r\n            '</body></html>';\r\n    var a = window.open(\"about:blank\", \"Report\")\r\n    a.document.write(html)\r\n    a.document.close()\r\n        });\r\n        return false;\r\n    }\r\n\r\n    getPDFs(){\r\n        \r\n        // var temp = JSON.stringify({\"workOrders\":this.state.returnedWorkOrders})\r\n        // console.log('in print function ');\r\n        // fetch(this.state.reportURL, {\r\n        //     method:\"POST\",\r\n        //     body:temp,\r\n        //     headers:{\r\n        //         'Content-Type': 'text/html',\r\n        //     }\r\n        // }).then(function(response) {\r\n        //     if (response.ok) {\r\n        //     return response\r\n        //     } else {\r\n        //     var error = new Error(response.statusText);\r\n        //     error.response = response;\r\n        //     throw error;\r\n        //     }\r\n        // })\r\n        // .then(res => res.json())\r\n        // .then((data) => {\r\n        //     this.setState({workOrderPDF:data});\r\n        //     \r\n        // })\r\n        // .catch(console.log);\r\n        \r\n    }\r\n    render(){\r\n       \r\n        const workForms = this.state.returnedWorkOrders.map((item)=>\r\n            <tr key={item.woNumber}>\r\n                <td>{item.woNumber}</td>\r\n                <td>{item.creator}</td>\r\n                <td>{item.priority}</td>\r\n                <td>{item.description}</td>\r\n            </tr>\r\n        );\r\n        return (\r\n            <div>\r\n                <header >\r\n                    <h1>Work Orders</h1>\r\n                </header>\r\n                <Form>\r\n                    <FormGroup>\r\n                        <Input type=\"select\" value={this.state.selectedState} onChange={(e)=> this.setState({selectedState:e.target.value})} >\r\n                            <option value='Status options' header>Status options</option>\r\n                            <option value='New'>New</option>\r\n                            <option value='Not Started'>Not Started</option>\r\n                            <option value='In Progress'>In Progress</option>\r\n                            <option value='Completed'>Completed</option>\r\n                            <option value='Closed'>Closed</option>\r\n                            <option value='Void'>Void</option>\r\n                        </Input>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"FromOrder\">Start</Label>\r\n                        <Input id=\"FromOrder\" type=\"text\" value={this.state.orderFrom} onChange={(e)=> this.setState({orderFrom:e.target.value})}/>\r\n                    </FormGroup>\r\n                    <FormGroup>\r\n                        <Label for=\"ToOrder\">End</Label>\r\n                        <Input id=\"ToOrder\" type=\"text\" value={this.state.orderTo} onChange={(e)=> this.setState({orderTo:e.target.value})}/>\r\n                    </FormGroup>\r\n                    <Button type=\"submit\" onClick={e=>this.GetWorkOrders(e)}>Get Work Orders</Button>\r\n                    <Button type=\"submit\" onClick={e=>this.PrintWorkOrders(e)}>Print</Button>\r\n\r\n                </Form>\r\n                <div>\r\n                    <h4>Work Orders</h4>\r\n                        <Table bordered dark hover>\r\n                            <thead>\r\n                                <tr>\r\n                                    <td>W.O. Number</td>\r\n                                    <td>Creator</td>\r\n                                    <td>Priority</td>\r\n                                    <td>Description</td>\r\n                                </tr>\r\n                            </thead>\r\n                            <tbody>\r\n                                {workForms}\r\n                            </tbody>\r\n                        </Table>\r\n                </div>\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default WorkOrders;","import React, { Component } from 'react';\r\nimport { Navbar } from 'reactstrap';\r\nimport { BrowserRouter,Switch, Route,withRouter } from 'react-router-dom';\r\nimport NavNav from './nav';\r\nimport WorkOrders from './WorkOrders';\r\n\r\n//import { actions } from 'react-redux-form';\r\n//import { TransitionGroup, CSSTransition } from 'react-transition-group';\r\n\r\n\r\nclass Main extends Component{\r\n\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"container\">\r\n                <Navbar light>\r\n                    <NavNav/>\r\n                </Navbar>\r\n                <BrowserRouter>\r\n                    <Switch>\r\n                        <Route path=\"/\" component={WorkOrders} />\r\n                    </Switch>\r\n                </BrowserRouter>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(Main);","import React, {Component} from 'react';\r\nimport Main from './components/Main';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  render(){\r\n    return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n          <Main />\r\n        </div>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { AuthenticationContext, adalFetch, withAdalLogin } from 'react-adal';\r\n\r\n// This is the Azure auth congig for test\r\nconst adalConfig = {\r\n tenant: 'ebba2929-765b-48f7-8c03-9b450ed099ba',\r\n clientId: '525a6f4c-451c-436e-ab49-0d8c44303961',\r\n endpoints: {\r\n     api: '525a6f4c-451c-436e-ab49-0d8c44303961'\r\n },\r\n apiUrl: 'https://apiarytest-react-workmanagement.azurewebsites.net',\r\n cacheLocation: 'localStorage'\r\n};\r\n\r\nexport const authContext = new AuthenticationContext(adalConfig);\r\nexport const adalApiFetch = (fetch, url, options) =>\r\n    adalFetch(authContext, adalConfig.endpoints.api, fetch, adalConfig.apiUrl + url, options);\r\nexport const withAdalLoginApi = withAdalLogin(authContext, adalConfig.endpoints.api);","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport $ from 'jquery';\r\nimport Popper from 'popper.js';\r\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport 'font-awesome/css/font-awesome.css';\r\nimport 'bootstrap-social/bootstrap-social.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { runWithAdal } from 'react-adal';\r\nimport { authContext } from './AuthConfig';\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\n\r\n const DO_NOT_LOGIN = false;\r\n runWithAdal(authContext, () => {\r\n    ReactDOM.render(<App />, document.getElementById('root'));\r\n      //Hot Module Replacement API\r\n    if (module.hot) {\r\n        module.hot.accept('./App.js', () => {\r\n            const NextApp = require('./App').default;\r\n            ReactDOM.render(<NextApp />, document.getElementById('root'));\r\n        });\r\n    }\r\n\r\n }, DO_NOT_LOGIN);\r\n\r\n\r\n\r\n\r\n//ReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}